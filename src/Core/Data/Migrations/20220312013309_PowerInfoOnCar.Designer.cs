// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGallery.Core.Data.Contexts.EF;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20220312013309_PowerInfoOnCar")]
    partial class PowerInfoOnCar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyGallery.Core.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("National")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MyGallery.Core.Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CarCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CaseType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CarCategoryId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("MyGallery.Core.Domain.Entities.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarCategories");
                });

            modelBuilder.Entity("MyGallery.Core.Domain.Entities.Brand", b =>
                {
                    b.OwnsOne("MyGallery.Core.Domain.ValueObjects.Audit", "Audit", b1 =>
                        {
                            b1.Property<int>("BrandId")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedBy")
                                .HasColumnType("text");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("BrandId");

                            b1.ToTable("Brands");

                            b1.WithOwner()
                                .HasForeignKey("BrandId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("MyGallery.Core.Domain.Entities.Car", b =>
                {
                    b.HasOne("MyGallery.Core.Domain.Entities.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGallery.Core.Domain.Entities.CarCategory", "CarCategory")
                        .WithMany("Cars")
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MyGallery.Core.Domain.ValueObjects.Audit", "Audit", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedBy")
                                .HasColumnType("text");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");
                        });

                    b.OwnsOne("MyGallery.Core.Domain.ValueObjects.PowerInfo", "PowerInfo", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<byte>("MaxSpeed")
                                .HasColumnType("smallint");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.OwnsOne("MyGallery.Core.Domain.ValueObjects.Engine", "Engine", b2 =>
                                {
                                    b2.Property<int>("PowerInfoCarId")
                                        .HasColumnType("integer");

                                    b2.Property<int?>("CylinderVolume")
                                        .HasColumnType("integer");

                                    b2.Property<int?>("MaxPower")
                                        .HasColumnType("integer");

                                    b2.Property<int?>("MaxTorque")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Transmission")
                                        .HasColumnType("text");

                                    b2.Property<string>("Type")
                                        .HasColumnType("text");

                                    b2.HasKey("PowerInfoCarId");

                                    b2.ToTable("Cars");

                                    b2.WithOwner()
                                        .HasForeignKey("PowerInfoCarId");
                                });

                            b1.Navigation("Engine");
                        });

                    b.Navigation("Audit");

                    b.Navigation("Brand");

                    b.Navigation("CarCategory");

                    b.Navigation("PowerInfo");
                });

            modelBuilder.Entity("MyGallery.Core.Domain.Entities.CarCategory", b =>
                {
                    b.OwnsOne("MyGallery.Core.Domain.ValueObjects.Audit", "Audit", b1 =>
                        {
                            b1.Property<int>("CarCategoryId")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedBy")
                                .HasColumnType("text");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("CarCategoryId");

                            b1.ToTable("CarCategories");

                            b1.WithOwner()
                                .HasForeignKey("CarCategoryId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("MyGallery.Core.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MyGallery.Core.Domain.Entities.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
